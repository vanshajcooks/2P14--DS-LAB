#include <iostream>
using namespace std;
// Q1 - Array operations
void createArray(int arr[], int &size) {
    cout << "Enter size of array: ";
    cin >> size;
    cout << "Enter " << size << " elements: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }
}

void displayArray(int arr[], int size) {
    cout << "Array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

void insertElement(int arr[], int &size) {
    int pos, value;
    cout << "Enter position and value to insert: ";
    cin >> pos >> value;
    for (int i = size; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
    size++;
}

void deleteElement(int arr[], int &size) {
    int pos;
    cout << "Enter position to delete: ";
    cin >> pos;
    for (int i = pos; i < size - 1; i++) {
        arr[i] = arr[i + 1];
    }
    size--;
}

void linearSearch(int arr[], int size) {
    int key;
    cout << "Enter element to search: ";
    cin >> key;
    for (int i = 0; i < size; i++) {
        if (arr[i] == key) {
            cout << "Element found at index " << i << endl;
            return;
        }
    }
    cout << "Element not found." << endl;
}

// Main Menu
int main() {
    int arr[100], size = 0, choice;
    do {
        cout << "\n==== MENU ====\n";
        cout << "1. Create Array\n2. Display Array\n3. Insert Element\n4. Delete Element\n5. Search Element\n6. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: createArray(arr, size); break;
            case 2: displayArray(arr, size); break;
            case 3: insertElement(arr, size); break;
            case 4: deleteElement(arr, size); break;
            case 5: linearSearch(arr, size); break;
        }
    } while (choice != 6);

    return 0;
}


// Q2 - Remove duplicate elements
void removeDuplicates(int arr[], int &size) {
    for (int i = 0; i < size; i++) {
        int j = i + 1;
        while (j < size) {
            if (arr[i] == arr[j]) {
                for (int k = j; k < size - 1; k++) {
                    arr[k] = arr[k + 1];
                }
                size--;
            } else {
                j++;
            }
        }
    }
}

// Q3 - Output demonstration
void q3_output() {
    int numbers[5] = {1};
    for (int i = 0; i < 5; i++) {
        cout << numbers[i];
    }
    cout << endl; // Output: 10000
}

// Q4a - Reverse array
void reverseArray(int arr[], int size) {
    for (int i = 0; i < size / 2; i++) {
        swap(arr[i], arr[size - i - 1]);
    }
}

// Q4b - Matrix multiplication
void matrixMultiplication() {
    int r1, c1, r2, c2;
    cin >> r1 >> c1 >> r2 >> c2;

    if (c1 != r2) {
        cout << "Matrix multiplication not possible!" << endl;
        return;
    }

    int A[10][10], B[10][10], C[10][10] = {0};

    for (int i = 0; i < r1; i++)
        for (int j = 0; j < c1; j++)
            cin >> A[i][j];

    for (int i = 0; i < r2; i++)
        for (int j = 0; j < c2; j++)
            cin >> B[i][j];

    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            for (int k = 0; k < c1; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            cout << C[i][j] << " ";
        }
        cout << endl;
    }
}

// Q4c - Transpose of a matrix
void transposeMatrix() {
    int rows, cols;
    cin >> rows >> cols;
    int M[10][10];

    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            cin >> M[i][j];

    for (int i = 0; i < cols; i++) {
        for (int j = 0; j < rows; j++) {
            cout << M[j][i] << " ";
        }
        cout << endl;
    }
}

// Q5 - Sum of rows & columns
void sumRowsCols() {
    int rows, cols;
    cin >> rows >> cols;
    int M[10][10];

    for (int i = 0; i < rows; i++)
        for (int j = 0; j < cols; j++)
            cin >> M[i][j];

    for (int i = 0; i < rows; i++) {
        int sum = 0;
        for (int j = 0; j < cols; j++) {
            sum += M[i][j];
        }
        cout << "Row " << i + 1 << " sum: " << sum << endl;
    }

    for (int j = 0; j < cols; j++) {
        int sum = 0;
        for (int i = 0; i < rows; i++) {
            sum += M[i][j];
        }
        cout << "Col " << j + 1 << " sum: " << sum << endl;
    }
}
