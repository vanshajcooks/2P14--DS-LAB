#include <iostream>
using namespace std;

#define MAX 100

// Function prototypes
void createArray(int arr[], int &n);
void displayArray(int arr[], int n);
void insertElement(int arr[], int &n, int pos, int val);
void deleteElement(int arr[], int &n, int pos);
void linearSearch(int arr[], int n, int key);
void removeDuplicates(int arr[], int &n);
void reverseArray(int arr[], int n);
void matrixMultiplication();
void matrixTranspose();
void sumRowsCols();

int main() {
    int arr[MAX], n = 0;
    int choice;

    while (true) {
        cout << "\n---- MENU ----\n";
        cout << "1. CREATE\n";
        cout << "2. DISPLAY\n";
        cout << "3. INSERT\n";
        cout << "4. DELETE\n";
        cout << "5. LINEAR SEARCH\n";
        cout << "6. REMOVE DUPLICATES\n";
        cout << "7. REVERSE ARRAY\n";
        cout << "8. MATRIX MULTIPLICATION\n";
        cout << "9. MATRIX TRANSPOSE\n";
        cout << "10. ROW & COLUMN SUM (Matrix)\n";
        cout << "11. PREDICT OUTPUT (given code)\n";
        cout << "12. EXIT\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: createArray(arr, n); break;
            case 2: displayArray(arr, n); break;
            case 3: {
                int pos, val;
                cout << "Enter position: ";
                cin >> pos;
                cout << "Enter value: ";
                cin >> val;
                insertElement(arr, n, pos, val);
                break;
            }
            case 4: {
                int pos;
                cout << "Enter position to delete: ";
                cin >> pos;
                deleteElement(arr, n, pos);
                break;
            }
            case 5: {
                int key;
                cout << "Enter value to search: ";
                cin >> key;
                linearSearch(arr, n, key);
                break;
            }
            case 6: removeDuplicates(arr, n); break;
            case 7: reverseArray(arr, n); break;
            case 8: matrixMultiplication(); break;
            case 9: matrixTranspose(); break;
            case 10: sumRowsCols(); break;
            case 11: {
                cout << "Output of given code:\n";
                int arr2[5] = {1};
                for (int i = 0; i < 5; i++)
                    cout << arr2[i]; // 1 0 0 0 0
                cout << "\n";
                break;
            }
            case 12: return 0;
            default: cout << "Invalid choice!\n";
        }
    }
}

// Functions implementation
void createArray(int arr[], int &n) {
    cout << "Enter size of array: ";
    cin >> n;
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];
}

void displayArray(int arr[], int n) {
    if (n == 0) { cout << "Array empty!\n"; return; }
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << "\n";
}

void insertElement(int arr[], int &n, int pos, int val) {
    if (pos < 0 || pos > n) { cout << "Invalid position!\n"; return; }
    for (int i = n; i > pos; i--)
        arr[i] = arr[i - 1];
    arr[pos] = val;
    n++;
}

void deleteElement(int arr[], int &n, int pos) {
    if (pos < 0 || pos >= n) { cout << "Invalid position!\n"; return; }
    for (int i = pos; i < n - 1; i++)
        arr[i] = arr[i + 1];
    n--;
}

void linearSearch(int arr[], int n, int key) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == key) {
            cout << "Found at position " << i << "\n";
            return;
        }
    }
    cout << "Not found!\n";
}

void removeDuplicates(int arr[], int &n) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; ) {
            if (arr[i] == arr[j]) {
                for (int k = j; k < n - 1; k++)
                    arr[k] = arr[k + 1];
                n--;
            } else {
                j++;
            }
        }
    }
    cout << "Duplicates removed!\n";
}

void reverseArray(int arr[], int n) {
    for (int i = 0; i < n / 2; i++) {
        int temp = arr[i];
        arr[i] = arr[n - 1 - i];
        arr[n - 1 - i] = temp;
    }
    cout << "Array reversed!\n";
}

void matrixMultiplication() {
    int a[10][10], b[10][10], c[10][10], r1, c1, r2, c2;
    cout << "Enter rows & cols of first matrix: ";
    cin >> r1 >> c1;
    cout << "Enter rows & cols of second matrix: ";
    cin >> r2 >> c2;
    if (c1 != r2) {
        cout << "Matrix multiplication not possible!\n";
        return;
    }
    cout << "Enter first matrix:\n";
    for (int i = 0; i < r1; i++)
        for (int j = 0; j < c1; j++)
            cin >> a[i][j];
    cout << "Enter second matrix:\n";
    for (int i = 0; i < r2; i++)
        for (int j = 0; j < c2; j++)
            cin >> b[i][j];
    for (int i = 0; i < r1; i++)
        for (int j = 0; j < c2; j++) {
            c[i][j] = 0;
            for (int k = 0; k < c1; k++)
                c[i][j] += a[i][k] * b[k][j];
        }
    cout << "Result:\n";
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++)
            cout << c[i][j] << " ";
        cout << "\n";
    }
}

void matrixTranspose() {
    int a[10][10], r, c;
    cout << "Enter rows & cols: ";
    cin >> r >> c;
    cout << "Enter matrix:\n";
    for (int i = 0; i < r; i++)
        for (int j = 0; j < c; j++)
            cin >> a[i][j];
    cout << "Transpose:\n";
    for (int i = 0; i < c; i++) {
        for (int j = 0; j < r; j++)
            cout << a[j][i] << " ";
        cout << "\n";
    }
}

void sumRowsCols() {
    int a[10][10], r, c;
    cout << "Enter rows & cols: ";
    cin >> r >> c;
    cout << "Enter matrix:\n";
    for (int i = 0; i < r; i++)
        for (int j = 0; j < c; j++)
            cin >> a[i][j];

    cout << "Row sums:\n";
    for (int i = 0; i < r; i++) {
        int sum = 0;
        for (int j = 0; j < c; j++)
            sum += a[i][j];
        cout << "Row " << i << ": " << sum << "\n";
    }

    cout << "Column sums:\n";
    for (int j = 0; j < c; j++) {
        int sum = 0;
        for (int i = 0; i < r; i++)
            sum += a[i][j];
        cout << "Col " << j << ": " << sum << "\n";
    }
}
