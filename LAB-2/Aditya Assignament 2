1) Implement the Binary search algorithm regarded as a fast search algorithm with run-time complexity of O(log n) in comparison to the Linear Search.
#include <iostream>
using namespace std;

int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == key) return mid;
        else if (arr[mid] < key) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}

int main() {
    int arr[] = {2, 4, 6, 8, 10, 12, 14};
    int n = sizeof(arr) / sizeof(arr[0]);
    int key = 10;
    int result = binarySearch(arr, n, key);
    if (result != -1) cout << "Element found at index " << result;
    else cout << "Element not found";
    return 0;
}
2) Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order. Code the Bubble sort with the following elements: 64 34 25 12 22 11 90
#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubbleSort(arr, n);
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    return 0;
}
3) Design the Logic to Find a Missing Number in a Sorted Array.
#include <iostream>
using namespace std;

int findMissingLinear(int arr[], int n) {
    int total = (n+1)*(n+2)/2;
    int sum = 0;
    for (int i = 0; i < n; i++) sum += arr[i];
    return total - sum;
}

int findMissingBinary(int arr[], int n) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] != mid+1) high = mid - 1;
        else low = mid + 1;
    }
    return low + 1;
}

int main() {
    int arr[] = {1, 2, 3, 5, 6};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << "Missing number (Linear): " << findMissingLinear(arr, n) << endl;
    cout << "Missing number (Binary): " << findMissingBinary(arr, n) << endl;
    return 0;
}
4) String Related Programs
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
int main() {
    // (a) Concatenate
    char str1[50] = "Hello ";
    char str2[] = "World";
    strcat(str1, str2);
    cout << str1 << endl;

    // (b) Reverse
    string s = "Hello";
    reverse(s.begin(), s.end());
    cout << s << endl;

    // (c) Delete vowels
    string t = "Hello World";
    string res = "";
    for (char c : t) {
        if (c!='a' && c!='e' && c!='i' && c!='o' && c!='u' &&
            c!='A' && c!='E' && c!='I' && c!='O' && c!='U')
            res += c;
    }
    cout << res << endl;

    // (d) Sort strings
    string arr[] = {"banana", "apple", "cherry"};
    int n = 3;
    sort(arr, arr+n);
    for (int i=0; i<n; i++) cout << arr[i] << " ";
    cout << endl;

    // (e) Uppercase to lowercase
    char ch = 'A';
    ch = tolower(ch);
    cout << ch;
    return 0;
}
5) Space required to store any two-dimensional array is rows × columns. Implement efficient way for special matrices.
#include <iostream>
using namespace std;

int main() {
    int n = 4;

    // (a) Diagonal Matrix
    int diag[n];
    diag[0]=1; diag[1]=2; diag[2]=3; diag[3]=4;

    // (b) Tridiagonal
    int tri[3*n-2];

    // (c) Lower Triangular
    int lower[n*(n+1)/2];

    // (d) Upper Triangular
    int upper[n*(n+1)/2];

    // (e) Symmetric Matrix
    int sym[n*(n+1)/2];

    cout << "Special matrices stored efficiently.";
    return 0;
}
6) Write a program to implement operations on Sparse Matrix using triplet.
#include <iostream>
using namespace std;

struct Element {
    int row, col, val;
};

int main() {
    int m=3, n=3;
    Element A[3] = {{0,0,1}, {1,1,2}, {2,2,3}};
    Element B[3] = {{0,0,4}, {1,1,5}, {2,2,6}};

    // (a) Transpose
    for(int i=0;i<3;i++) cout << A[i].col << " " << A[i].row << " " << A[i].val << endl;

    // (b) Addition
    for(int i=0;i<3;i++) cout << A[i].row << " " << A[i].col << " " << A[i].val+B[i].val << endl;

    // (c) Multiplication (Diagonal case)
    for(int i=0;i<3;i++) cout << A[i].row << " " << A[i].col << " " << A[i].val*B[i].val << endl;
return 0;
}
7) Let A[1 …. n] be an array of n real numbers. Count inversions.
#include <iostream>
using namespace std;

int merge(int arr[], int temp[], int left, int mid, int right) {
    int i = left, j = mid, k = left;
    int inv_count = 0;
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) temp[k++] = arr[i++];
        else {
            temp[k++] = arr[j++];
            inv_count += (mid - i);
        }
    }
    while (i <= mid - 1) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
    for (i = left; i <= right; i++) arr[i] = temp[i];
    return inv_count;
}

int mergeSort(int arr[], int temp[], int left, int right) {
    int mid, inv_count = 0;
    if (right > left) {
        mid = (right + left)/2;
        inv_count += mergeSort(arr, temp, left, mid);
        inv_count += mergeSort(arr, temp, mid+1, right);
        inv_count += merge(arr, temp, left, mid+1, right);
    }
    return inv_count;
}

int main() {
    int arr[] = {2, 4, 1, 3, 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    int temp[n];
    cout << "Number of inversions are " << mergeSort(arr, temp, 0, n-1);
    return 0;
}
8) Write a program to count the total number of distinct elements in an array of length n.
#include <iostream>
#include <set>
using namespace std;

int main() {
    int arr[] = {1, 2, 2, 3, 4, 4, 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    set<int> s;
    for (int i = 0; i < n; i++) s.insert(arr[i]);
    cout << "Number of distinct elements: " << s.size();
    return 0;
}
