// Ques 1
#include<iostream>
using namespace std;

int binarySearch(int arr[], int size, int target) {
    int st = 0, end = size - 1;

    while (st <= end) {
        int mid = st + (end - st) / 2;
        if (arr[mid] == target) {
            return mid;
        }
        if (arr[mid] < target) {
            st = mid + 1;
        } else {
            end = mid - 1;
        }
    }
    return -1;
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int size = sizeof(arr) / sizeof(arr[0]); // Calculate the size of the array
    int target = 9;

    cout << binarySearch(arr, size, target) << endl;
    return 0;
}

// Ques 2
#include<iostream>
using namespace std;

void bubbleSort(int arr[],int n){ //O(n^2)
    bool isSwap=false;

    for(int i=0;i<n;i++){
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
                isSwap=true;
            }
        }
        if(!isSwap){ //array is already sorted
            return;
        }
    }
 }

void printArray(int arr[],int n){
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}
 
int main(){
    int n=5;
    int arr[]={64, 34, 25, 12, 22, 11, 90};
    bubbleSort(arr,n);
    printArray(arr,n);
    return 0;
}

// Ques 3
// (a) (b)
#include <iostream>
using namespace std;

int findMissingSum(int arr[], int n) {
    int expected = (n + 1) * (n + 2) / 2;
    int actual = 0;
    for (int i = 0; i < n; i++) actual += arr[i];
    return expected - actual;
}

int findMissingBinary(int arr[], int n) {
    int l = 0, r = n - 1;
    while (l <= r) {
        int m = l + (r - l) / 2;
        if (arr[m] != m + 1) r = m - 1;
        else l = m + 1;
    }
    return l + 1;
}

int main() {
    int arr[] = {1, 2, 4, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Missing (sum): " << findMissingSum(arr, n) << endl;
    cout << "Missing (binary): " << findMissingBinary(arr, n) << endl;

    return 0;
}

// Ques 4
// (a) Concatenate one string to another string
#include <iostream>
#include <string>
using namespace std;

int main() {
    string str1, str2;
    cout << "Enter the first string: ";
    getline(cin, str1);
    cout << "Enter the second string: ";
    getline(cin, str2);

    string result = str1 + str2;
    cout << "Concatenated string: " << result << endl;

    return 0;
}

// (b) Reverse a string
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int main() {
    string str;
    cout << "Enter a string to reverse: ";
    getline(cin, str);

    reverse(str.begin(), str.end());
    cout << "Reversed string: " << str << endl;

    return 0;
}

// (c) Delete all the vowels from the string
#include <iostream>
#include <string>
using namespace std;

bool isVowel(char ch) {
    ch = tolower(ch);
    return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');
}

int main() {
    string str, result = "";
    cout << "Enter a string: ";
    getline(cin, str);

    for (char ch : str) {
        if (!isVowel(ch)) {
            result += ch;
        }
    }

    cout << "String after removing vowels: " << result << endl;
    return 0;
}

// (d) Sort the strings in alphabetical order
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int main() {
    string a, b, c;

    cout << "Enter first string: ";
    getline(cin, a);
    cout << "Enter second string: ";
    getline(cin, b);
    cout << "Enter third string: ";
    getline(cin, c);

    // Put strings into an array
    string arr[3] = {a, b, c};

    // Sort them
    sort(arr, arr + 3);

    cout << "Strings in alphabetical order:" << endl;
    for (int i = 0; i < 3; i++) {
        cout << arr[i] << endl;
    }

    return 0;
}

// (e) Convert uppercase to lowercase (easy version)
#include <iostream>
using namespace std;

int main() {
    char ch;
    cout << "Enter an uppercase character: ";
    cin >> ch;

    if (isupper(ch)) {
        char lower = tolower(ch);
        cout << "Lowercase character: " << lower << endl;
    } else {
        cout << "The entered character is not an uppercase letter." << endl;
    }

    return 0;
}


// Ques 5 
#include <iostream>
using namespace std;

// Functions for Diagonal Matrix
void setDiagonal(int A[], int i, int j, int x, int n) {
    if (i == j)
        A[i - 1] = x;
}

int getDiagonal(int A[], int i, int j, int n) {
    if (i == j)
        return A[i - 1];
    else
        return 0;
}

void displayDiagonal(int A[], int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << getDiagonal(A, i, j, n) << " ";
        }
        cout << endl;
    }
}

// Functions for Tri-diagonal Matrix
void setTriDiagonal(int A[], int i, int j, int x, int n) {
    if (i - j == 1)
        A[i - 2] = x;
    else if (i - j == 0)
        A[n - 1 + i - 1] = x;
    else if (i - j == -1)
        A[2 * n - 1 + i - 1] = x;
}

int getTriDiagonal(int A[], int i, int j, int n) {
    if (i - j == 1)
        return A[i - 2];
    else if (i - j == 0)
        return A[n - 1 + i - 1];
    else if (i - j == -1)
        return A[2 * n - 1 + i - 1];
    else
        return 0;
}

void displayTriDiagonal(int A[], int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << getTriDiagonal(A, i, j, n) << " ";
        }
        cout << endl;
    }
}

// Functions for Lower Triangular Matrix
void setLower(int A[], int i, int j, int x) {
    if (i >= j)
        A[i * (i - 1) / 2 + j - 1] = x;
}

int getLower(int A[], int i, int j) {
    if (i >= j)
        return A[i * (i - 1) / 2 + j - 1];
    else
        return 0;
}

void displayLower(int A[], int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << getLower(A, i, j) << " ";
        }
        cout << endl;
    }
}

// Functions for Upper Triangular Matrix
void setUpper(int A[], int i, int j, int x, int n) {
    if (i <= j)
        A[j * (j - 1) / 2 + i - 1] = x;
}

int getUpper(int A[], int i, int j, int n) {
    if (i <= j)
        return A[j * (j - 1) / 2 + i - 1];
    else
        return 0;
}

void displayUpper(int A[], int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << getUpper(A, i, j, n) << " ";
        }
        cout << endl;
    }
}

// Functions for Symmetric Matrix
void setSymmetric(int A[], int i, int j, int x) {
    if (i >= j)
        A[i * (i - 1) / 2 + j - 1] = x;
}

int getSymmetric(int A[], int i, int j) {
    if (i >= j)
        return A[i * (i - 1) / 2 + j - 1];
    else
        return A[j * (j - 1) / 2 + i - 1];
}

void displaySymmetric(int A[], int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << getSymmetric(A, i, j) << " ";
        }
        cout << endl;
    }
}

int main() {
    int n, choice;
    cout << "Enter size of matrix (n x n): ";
    cin >> n;

    cout << "\nSelect the type of matrix to work with:" << endl;
    cout << "1. Diagonal Matrix" << endl;
    cout << "2. Tri-diagonal Matrix" << endl;
    cout << "3. Lower Triangular Matrix" << endl;
    cout << "4. Upper Triangular Matrix" << endl;
    cout << "5. Symmetric Matrix" << endl;
    cout << "Enter choice (1-5): ";
    cin >> choice;

    switch (choice) {
        case 1: {
            int* A = new int[n]; // For Diagonal Matrix
            cout << "Enter diagonal elements:" << endl;
            for (int i = 1; i <= n; i++) {
                int x;
                cout << "A[" << i << "][" << i << "]: ";
                cin >> x;
                setDiagonal(A, i, i, x, n);
            }
            cout << "Diagonal Matrix:\n";
            displayDiagonal(A, n);
            delete[] A;
            break;
        }
        case 2: {
            int* A = new int[3 * n - 2]; // For Tri-diagonal Matrix
            cout << "Enter elements for the tri-diagonal matrix:" << endl;
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if (abs(i - j) <= 1) {
                        int x;
                        cout << "A[" << i << "][" << j << "]: ";
                        cin >> x;
                        setTriDiagonal(A, i, j, x, n);
                    }
                }
            }
            cout << "Tri-diagonal Matrix:\n";
            displayTriDiagonal(A, n);
            delete[] A;
            break;
        }
        case 3: {
            int* A = new int[n * (n + 1) / 2]; // For Lower Triangular Matrix
            cout << "Enter elements for the lower triangular matrix:" << endl;
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= i; j++) {
                    int x;
                    cout << "A[" << i << "][" << j << "]: ";
                    cin >> x;
                    setLower(A, i, j, x);
                }
            }
            cout << "Lower Triangular Matrix:\n";
            displayLower(A, n);
            delete[] A;
            break;
        }
        case 4: {
            int* A = new int[n * (n + 1) / 2]; // For Upper Triangular Matrix
            cout << "Enter elements for the upper triangular matrix:" << endl;
            for (int i = 1; i <= n; i++) {
                for (int j = i; j <= n; j++) {
                    int x;
                    cout << "A[" << i << "][" << j << "]: ";
                    cin >> x;
                    setUpper(A, i, j, x, n);
                }
            }
            cout << "Upper Triangular Matrix:\n";
            displayUpper(A, n);
            delete[] A;
            break;
        }
        case 5: {
            int* A = new int[n * (n + 1) / 2]; // For Symmetric Matrix
            cout << "Enter elements for the symmetric matrix:" << endl;
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= i; j++) {
                    int x;
                    cout << "A[" << i << "][" << j << "]: ";
                    cin >> x;
                    setSymmetric(A, i, j, x);
                }
            }
            cout << "Symmetric Matrix:\n";
            displaySymmetric(A, n);
            delete[] A;
            break;
        }
        default:
            cout << "Invalid choice!" << endl;
    }

    return 0;
}

// Ques 6
#include <iostream>
using namespace std;

// Function to get the transpose of a matrix
void transpose(int matrix[][3], int transposeMatrix[][3], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposeMatrix[j][i] = matrix[i][j];
        }
    }
}

// Function to add two matrices
void add(int matrix1[][3], int matrix2[][3], int result[][3], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
}

// Function to multiply two matrices
void multiply(int matrix1[][3], int matrix2[][3], int result[][3], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = 0; // Initialize result to zero
            for (int k = 0; k < cols; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
}

// Function to print a matrix
void printMatrix(int matrix[][3], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int rows = 3, cols = 3;

    // Matrix 1
    int matrix1[3][3] = {
        {1, 0, 0},
        {0, 0, 3},
        {4, 0, 0}
    };

    // Matrix 2
    int matrix2[3][3] = {
        {0, 2, 0},
        {0, 0, 0},
        {1, 0, 0}
    };

    // Result matrices
    int transposeMatrix[3][3];
    int sumMatrix[3][3];
    int prodMatrix[3][3];

    // Transpose of matrix1
    transpose(matrix1, transposeMatrix, rows, cols);
    cout << "Transpose of matrix1:\n";
    printMatrix(transposeMatrix, rows, cols);

    // Addition of matrix1 and matrix2
    add(matrix1, matrix2, sumMatrix, rows, cols);
    cout << "Sum of matrix1 and matrix2:\n";
    printMatrix(sumMatrix, rows, cols);

    // Multiplication of matrix1 and matrix2
    multiply(matrix1, matrix2, prodMatrix, rows, cols);
    cout << "Product of matrix1 and matrix2:\n";
    printMatrix(prodMatrix, rows, cols);

    return 0;
}

// Ques 7
#include <iostream>
using namespace std;

int mergeAndCount(int arr[], int temp[], int left, int mid, int right) {
    int i = left, j = mid + 1, k = left, invCount = 0;
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) temp[k++] = arr[i++];
        else {
            temp[k++] = arr[j++];
            invCount += (mid - i + 1);
        }
    }
    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
    for (int idx = left; idx <= right; idx++) arr[idx] = temp[idx];
    return invCount;
}

int mergeSortAndCount(int arr[], int temp[], int left, int right) {
    int invCount = 0;
    if (left < right) {
        int mid = (left + right) / 2;
        invCount += mergeSortAndCount(arr, temp, left, mid);
        invCount += mergeSortAndCount(arr, temp, mid + 1, right);
        invCount += mergeAndCount(arr, temp, left, mid, right);
    }
    return invCount;
}

int main() {
    int arr[] = {1, 20, 6, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int temp[n];
    cout << "Number of inversions: " << mergeSortAndCount(arr, temp, 0, n - 1) << endl;
    return 0;
}


// Ques 8
int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int arr[100];
    cout << "Enter " << n << " elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int distinctCount = 0;

    for (int i = 0; i < n; i++) {
        bool isDuplicate = false;
        for (int j = 0; j < i; j++) {
            if (arr[i] == arr[j]) {
                isDuplicate = true;
                break;
            }
        }
        if (!isDuplicate) {
            distinctCount++;
        }
    }

    cout << "Total distinct elements: " << distinctCount << endl;
    return 0;
}
