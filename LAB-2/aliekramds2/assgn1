#include <iostream>
#include <vector>
using namespace std;

// Iterative Binary Search
int binarySearchIterative(const vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2; // prevent overflow
        if (arr[mid] == target)
            return mid;
        else if (arr[mid] < target)
            left = mid + 1; // search in right half
        else
            right = mid - 1; // search in left half
    }
    return -1; // not found
}

// Recursive Binary Search
int binarySearchRecursive(const vector<int>& arr, int target, int left, int right) {
    if (left > right)
        return -1;

    int mid = left + (right - left) / 2;

    if (arr[mid] == target)
        return mid;
    else if (arr[mid] < target)
        return binarySearchRecursive(arr, target, mid + 1, right);
    else
        return binarySearchRecursive(arr, target, left, mid - 1);
}

int main() {
    vector<int> data = {2, 4, 7, 10, 14, 23, 32, 39, 41, 56};
    int target = 23;

    // Iterative search
    int resultIter = binarySearchIterative(data, target);
    if (resultIter != -1)
        cout << "Iterative: Found at index " << resultIter << endl;
    else
        cout << "Iterative: Not found" << endl;

    // Recursive search
    int resultRec = binarySearchRecursive(data, target, 0, data.size() - 1);
    if (resultRec != -1)
        cout << "Recursive: Found at index " << resultRec << endl;
    else
        cout << "Recursive: Not found" << endl;

    return 0;
}
