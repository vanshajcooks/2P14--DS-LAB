class DiagonalMatrix {//for diagonal
    int n;
    vector<int> diag;
public:
    DiagonalMatrix(int n): n(n), diag(n, 0) {}

    void set(int i, int j, int val) {
        if (i == j) diag[i-1] = val;
    }

    int get(int i, int j) {
        if (i == j) return diag[i-1];
        return 0;
    }
};


class TriDiagonalMatrix { // for tridiagonal
    int n;
    vector<int> arr; // size 3n - 2
public:
    TriDiagonalMatrix(int n): n(n), arr(3*n-2, 0) {}

    void set(int i, int j, int val) {
        if (i-j == 1) arr[i-2] = val;          // lower
        else if (i == j) arr[n-1 + i-1] = val; // main
        else if (j-i == 1) arr[2*n-1 + i-1] = val; // upper
    }

    int get(int i, int j) {
        if (i-j == 1) return arr[i-2];
        else if (i == j) return arr[n-1 + i-1];
        else if (j-i == 1) return arr[2*n-1 + i-1];
        return 0;
    }
};

class LowerTriangularMatrix { // loweer triangular
    int n;
    vector<int> arr; // size n(n+1)/2
public:
    LowerTriangularMatrix(int n): n(n), arr(n*(n+1)/2, 0) {}

    void set(int i, int j, int val) {
        if (i >= j) arr[i*(i-1)/2 + (j-1)] = val;
    }

    int get(int i, int j) {
        if (i >= j) return arr[i*(i-1)/2 + (j-1)];
        return 0;
    }
};

class UpperTriangularMatrix {// upper triangular
    int n;
    vector<int> arr; // size n(n+1)/2
public:
    UpperTriangularMatrix(int n): n(n), arr(n*(n+1)/2, 0) {}

    void set(int i, int j, int val) {
        if (i <= j) arr[(i-1)*n - (i-2)*(i-1)/2 + (j-i)] = val;
    }

    int get(int i, int j) {
        if (i <= j) return arr[(i-1)*n - (i-2)*(i-1)/2 + (j-i)];
        return 0;
    }
};


class SymmetricMatrix { // symmetric
    int n;
    vector<int> arr; // size n(n+1)/2
public:
    SymmetricMatrix(int n): n(n), arr(n*(n+1)/2, 0) {}

    void set(int i, int j, int val) {
        if (i >= j) arr[i*(i-1)/2 + (j-1)] = val;
        else arr[j*(j-1)/2 + (i-1)] = val; // symmetry
    }

    int get(int i, int j) {
        if (i >= j) return arr[i*(i-1)/2 + (j-1)];
        else return arr[j*(j-1)/2 + (i-1)];
    }


